// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(uuid()) @map("id")
  tegs        String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String @map("user_id")
  countLikes  Int
  countComments Int
  state       PostState @map("post_state")//Состояние публикации
  repost      Boolean
  new         Boolean @default(true)

  originPostId String @map("originpost_id")
  type        PostType @map("post_type")

  name        String //Название публикации | текст цитаты | путь к файлу фото | ссылка (публикация типа ссылка)
  video       String? //Публикация типа видео -- путь к файлу с видео
  foto       String? @default("")//Публикация типа видео -- путь к файлу с фото
  announcement String? //Публикация типа текст -- текст с анонсом
  text        String? //Публикация типа текст -- текст публикации,//Публикация типа ссылка -- описание
  author     String? //Публикация типа цитата -- автор

  comments    Comment[]// один ко многим - публикация - комментарии разных пользователей
  likes    Like[]// один ко многим - публикация - лайки разных пользователей
  @@index([name])
  @@map("posts")
}
enum PostType {
  video
  text
  quote
  foto
  reference
}

enum PostState {
  draft
  published
}


model Comment {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  message String @map("text")
  userId String @map("user_id")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @map("post_id")
  @@index([postId])
   @@map("comments")
}


model Like {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  userId String @map("user_id")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @map("post_id")
  @@index([postId])
   @@map("likes")
}

